name 'camera'

enable_corba
using_library "camera_prosilica_gige"
import_types_from "base/samples/frame.h"

task_context 'CameraTask' do
    needs_configuration
    output_port 'frame', ro_ptr('base::samples::frame::Frame')
    
    property('camera_id', 'string','105984').
    	doc 'unique camerea id'
    property('width', 'int',640).
    	doc 'width of the frame'
    property('height', 'int',480).
    	doc 'height of the frame'
    property('region_x', 'int',0).
    	doc 'start of region readout, in pixels; left edge.'
    property('region_y', 'int',0).
    	doc 'start of region readout, in pixels; top edge.'
    property('trigger_mode', 'string','fixed').
    	doc 'trigger mode of the camera, allowed values: freerun, fixed, sync_in1'
    property('fps', 'int',30).
    	doc 'frames per second'
    property('exposure', 'int',5000).
    	doc 'exposure value if exposure mode is not auto'
    property('exposure_mode_auto', 'bool',false).
    	doc 'exposure mode'
    property('gain_mode_auto', 'bool',true).
    	doc 'gain mode'
    property('gain', 'int',0).
    	doc 'gain value'
    property('binning_x', 'int',1).
    	doc 'horizontal binning. 1=no binning.'
    property('binning_y', 'int',1).
    	doc 'vertical binning. 1=no binning.'
    property('output_format', 'string','rgb8').
    	doc 'output format of the output_port frame, allowed values: bayer, rgb8, (the received camera frame is always bayer)'
    property('log_interval_in_sec', 'int',2).
    	doc 'interval for logging a statistic about valid and invalid frames per second (0= logging of)'
    property('frame_buffer_size', 'int',5).
    	doc 'size if the frame buffer'
    property('mode', 'string','Master').
    	doc 'opening mode (Master, Monitor, MasterMulticast)'
    property('synchronize_time_interval', 'int',0).
    	doc 'time interval in micro seconds which is used to synchronize camera time with system time. 0 == no synchronization'
    property('whitebalance_mode', 'string','auto').
    	doc 'whitebalance mode (auto, manual, auto_once)'
    property('whitebalance_blue', 'int',100).
    	doc 'Blue gain expressed as a percentage of the camera default setting.'
    property('whitebalance_red', 'int',100).
    	doc 'Red gain expressed as a percentage of the camera default setting.'   
    property('whitebalance_auto_rate', 'int',100).
    	doc 'How fast the Auto white balance will update.'
    property('whitebalance_auto_threshold', 'int',5).
    	doc 'Sets a range of scene color changes in which the automatic whitebalance will not respond.'
    property('frame_start_trigger_event', 'string','EdgeRising').
    	doc 'External trigger event, allowed values:  EdgeRising, EdgeFalling, EdgeAny, LevelHigh, LevelLow'
end

#use deployment camera_viewer which is defined in orocos_frame_viewer if you want to test the camera task
deployment "camera" do
    camera_task = task("camera", 'CameraTask')
    add_default_logger
    if !corba_enabled?
       browse camera_task
    end
end

