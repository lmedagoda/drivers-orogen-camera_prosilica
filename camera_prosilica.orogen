name 'camera_prosilica'

using_library "camera_prosilica_gige"
using_library "opencv"
using_task_library "camera_base"
import_types_from "camera_base"

task_context 'Task' do
    subclasses "camera_base::Task"

    property('region_x', 'int',0).
    	doc 'start of region readout, in pixels; left edge.'
    property('region_y', 'int',0).
    	doc 'start of region readout, in pixels; top edge.'
    property('trigger_mode', 'string','fixed').
    	doc 'trigger mode of the camera, allowed values: freerun, fixed, sync_in1, none'
    property('exposure', 'int',5000).
    	doc 'exposure value if exposure mode is not auto'
    property('exposure_mode', 'string','auto').
    	doc 'exposure mode (auto, manual, external, none)'
    property('gain_mode_auto', 'bool',true).
    	doc 'gain mode'
    property('gain', 'int',0).
    	doc 'gain value'
    property('binning_x', 'int',1).
    	doc 'horizontal binning. 1=no binning.'
    property('binning_y', 'int',1).
    	doc 'vertical binning. 1=no binning.'
    property('mode', 'string','Master').
    	doc 'opening mode (Master, Monitor, MasterMulticast)'
    property('synchronize_time_interval', 'int',0).
    	doc 'time interval in micro seconds which is used to synchronize camera time with system time. 0 == no synchronization'
    property('whitebalance_mode', 'string','auto').
    	doc 'whitebalance mode (auto, manual, auto_once, none)'
    property('whitebalance_blue', 'int',100).
    	doc 'Blue gain expressed as a percentage of the camera default setting.'
    property('whitebalance_red', 'int',100).
    	doc 'Red gain expressed as a percentage of the camera default setting.'
    property('whitebalance_auto_rate', 'int',100).
    	doc 'How fast the Auto white balance will update.'
    property('whitebalance_auto_threshold', 'int',5).
    	doc 'Sets a range of scene color changes in which the automatic whitebalance will not respond.'
    property('frame_start_trigger_event', 'string','none').
    	doc 'External trigger event, allowed values:  EdgeRising, EdgeFalling, EdgeAny, LevelHigh, LevelLow, none'
    property('package_size', 'int',0).
    	doc 'In Bytes. Size of image data packet. This size includes the GVSP, UDP, and IP headers. (0 == max possible)'
end

#use deployment camera_viewer which is defined in orocos_frame_viewer if you want to test the camera task
deployment "camera" do
    camera_taska = task("camera_a", 'Task')
    camera_taskb = task("camera_b", 'Task')
    add_default_logger
    if !corba_enabled?
       browse camera_taska
    end
end

simple_deployment("left_camera", 'Task')
simple_deployment("right_camera", 'Task')
